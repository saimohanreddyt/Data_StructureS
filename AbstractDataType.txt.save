Abstract data type (ADT):
-x-x-x-x-x-x-x-x-x-x-x-x-
An abstract data type (ADT) is a logical description of how we view the data
and the operations that are allowed on it. ADT is defined as a user point of
view of a data type. ADT concerns about the possible values of the data and
what are interface exposed by it.

ADT does not concern about the actual implementation of the data structure.

For example, a user wants to store some integers and find a mean of it. Does
not talk about how exactly it will be implemented.


Data-Structure:
-x-x-x-x-x-x-x-
Data structures are concrete representations of data and are defined as a
programmer point of view. Data-structure represents how data will be stored
in memory. All data-structures have their own pros and cons. Depending upon
the type problem we pick a data-structure that is best suited for it.

For example, we can store data in an array, a linked-list, stack, queue, tree, etc.

Stack:
-x-x-x-

Stack is a special kind of data structure that follows Last-In-First-Out (LIFO)
strategy. This means that the element that is added last will be the first to be
removed.

The various applications of stack are:

1. Recursion: recursive calls are preformed using system stack.
2. Postfix evaluation of expression.
3. Backtracking
4. Depth-first search of trees and graphs.
5. Converting a decimal number into a binary number etc.

Stack ADT Operations

	Push(k): Adds a new item to the top of the stack
	Pop(): Remove an element from the top of the stack and return its
		value.
	Top(): Returns the value of the element at the top of the stack
	Size(): Returns the number of elements in the stack

	IsEmpty(): determines whether the stack is empty. It returns 1 if the
		stack is empty or return 0.
	Note: All the above Stack operations are implemented in O(1) Time



Queue:
-x-x-x-

A queue is a First-In-First-Out (FIFO) kind of data structure. The element that
is added to the queue first will be the first to be removed and so on.
Queue ADT Operations:
·
·
Add(): Add a new element to the back of the queue.
Remove(): remove an element from the front of the queue and return its
value.
· Front(): return the value of the element at the front of the queue.
· Size(): returns the number of elements inside the queue.
· IsEmpty(): returns 1 if the queue is empty otherwise return 0
Note: All the above Queue operations are implemented in O(1) Time
Complexity.
